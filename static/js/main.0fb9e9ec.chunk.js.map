{"version":3,"sources":["components/Form/FormContext.js","components/widgets/InputBox/index.js","components/widgets/defaultWidgets/index.js","util/common/index.js","components/widgets/index.js","services/settings/tenants/tenant6.js","components/FormGen/index.js","services/settings/util.js","components/Form/index.js","App.js","services/settings/tenants/tenant1.js","services/settings/tenants/tenant2.js","services/settings/tenants/tenant4.js","services/settings/tenants/tenant5.js","serviceWorker.js","index.js"],"names":["FormContext","React","createContext","patterns","nonEmpty","regx","message","email","validate","text","pattern","errMsg","match","InputBox","props","useState","error","setError","value","setValue","useEffect","className","TextField","label","onChange","e","target","variant","helperText","defaultProps","widgets","EmailInputBox","onValueChange","options","Text","_","templateSettings","interpolate","template","globalValue","Question","YesNo","isYes","setYes","isNo","setNo","type","checked","YesNoText","style","background","onClick","Bop","currentSelection","setSelection","map","o","i","key","select","GoogleAssist","inputEl","useRef","exportNames","autocomplete","window","google","maps","places","Autocomplete","current","types","componentRestrictions","setFields","autocompleteLsr","addListener","place","getPlace","photosUrl","photos","p","getUrl","maxHeight","globalValues","k","get","onGlobalValueChange","event","removeListener","clearInstanceListeners","ref","focus","GoogleImages","slice","imgUrl","src","alt","Journey","currentPage","setCurrentPage","errors","setErrors","validatePage","pages","reduce","m","v","name","push","errorMessage","Breadcrumbs","separator","Typography","color","title","init","content","d","onPageChange","length","c","Summary","setContent","collapsed","setCollapsed","onContentValueUpdate","toggle","summary","s","evalShowOn","showOn","args","parser","Parser","setFunction","params","setVariable","res","parse","console","result","WidgetWrapper","item","Widget","context","useContext","keys","getKeys","setGlobalValue","isVisible","setVisibility","onContentValueChangeCallback","callbackIndex","deregister","val","setKey","setKeys","hasOwnProperty","RepeatableWidgetWrapper","index","getList","list","setEle","wrapWidgets","wrappedWidgets","isRepeatable","allWidgets","extend","customWidgets","wrappedCustomWidgets","wrapCustomWidgets","GooglePlaces","items","widget","place_id","formatted_address","rating","BuildingList","container","BuildingWidget","LocationWidget","LOBSelection","ToList","setList","callbacks","listContextValue","ele","l","forEach","callback","Provider","cloneElement","FormGen","j","withWidgetRenderer","defaultData","data","initContent","defaultValue","Form","newKeys","tenants","sessionStorage","getItem","App","currTenant","setCurrTenant","parseInt","t","href","alert","JSON","stringify","setItem","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fb9e9ec.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const FormContext = React.createContext();\n","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\n\nconst patterns = {\n  nonEmpty: {regx: /.+/g, message: 'Can\\'t be empty'},\n  email: {regx: /.+@.+\\..+/g, message: 'Invalid email'}\n};\n\nconst validate = (text, pattern) => {\n  let errMsg = null;\n  if (text.match(patterns[pattern].regx) === null) {\n    errMsg = patterns[pattern].message;\n  }\n  return errMsg;\n};\n\nInputBox.propTypes = {\n  text: PropTypes.string,\n  pattern: PropTypes.string,\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    null\n  ]),\n  onChange: PropTypes.func\n};\n\nInputBox.defaultProps = {\n  text: null,\n  label: null,\n  pattern: 'nonEmpty'\n};\n\nfunction InputBox(props) {\n  const [error, setError] = useState(props.text === null ? null : validate(props.text, props.pattern));\n  const [value, setValue] = useState(props.text);\n\n  const handleTextChange = (e) => {\n    const text = e.target.value;\n    const errMsg = validate(text, props.pattern);\n    props.onChange(errMsg === null ? text : null);\n    setError(errMsg);\n  };\n\n  useEffect(() => {\n    setValue(props.text);\n  }, [props.text]);\n\n  return (<div className=\"formElement\">\n    {/*{props.label && <div>{props.label}</div>}*/}\n    {/*<input type={'text'}*/}\n    {/*       autoComplete=\"no-fill\"*/}\n    {/*       value={value || ''}*/}\n    {/*       onChange={handleTextChange}/>*/}\n    <TextField\n      error={error !== null}\n      label={props.label ? props.label : ''}\n      value={value === null ? '' : value}\n      onChange={handleTextChange}\n      variant=\"outlined\"\n      helperText={error}\n    />\n  </div>);\n}\n\nexport default InputBox;\n","//Define your widgets here -\n//value will contain the initialization value of the component,\n//this value must be updated using onValueChange function\nimport React, {useEffect, useState, useRef} from 'react';\nimport InputBox from \"./../InputBox\";\nimport _ from \"lodash\";\nimport Form from '../../Form';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Typography from '@material-ui/core/Typography';\n\nexport const widgets = {\n  EmailInputBox: (props) => {\n    return <InputBox text={props.value} pattern={'email'} onChange={props.onValueChange} {...props.options}/>;\n  },\n  InputBox: (props) => {\n    return <InputBox text={props.value} pattern={'nonEmpty'} onChange={props.onValueChange} {...props.options}/>;\n  },\n  Text: (props) => {\n    _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n    var text = _.template(props.options.text)(props.globalValue);\n    return <div className=\"ele\">{text}</div>\n  },\n  Question: (props) => {\n    return <div className=\"ele\">{props.options.text}</div>;\n  },\n  YesNo: (props) => {\n\n    const [isYes, setYes] = useState(props.value === null ? false : props.value);\n    const [isNo, setNo] = useState(props.value === null ? false : !props.value);\n\n    const onYes = () => {\n      setYes(true);\n      setNo(false);\n      props.onValueChange(true);\n    };\n\n    const onNo = () => {\n      setNo(true);\n      setYes(false);\n      props.onValueChange(false);\n    };\n\n    return <div className=\"ele\">\n      <span>Yes</span>\n      &nbsp;<input type=\"radio\"\n                   checked={isYes}\n                   onChange={onYes}/>\n      &nbsp;<span>No</span>\n      &nbsp;<input type=\"radio\"\n                   checked={isNo}\n                   onChange={onNo}/>\n    </div>\n  },\n  YesNoText: (props) => {\n    const [isYes, setYes] = useState(props.value === null ? false : props.value);\n    const [isNo, setNo] = useState(props.value === null ? false : !props.value);\n\n    const onYes = () => {\n      setYes(true);\n      setNo(false);\n      props.onValueChange(true);\n    };\n\n    const onNo = () => {\n      setNo(true);\n      setYes(false);\n      props.onValueChange(false);\n    };\n    return <div className=\"ele col\">\n      <div className=\"box\" style={{background: isYes === true ? 'grey' : null}} onClick={onYes}>Yes</div>\n      <div className=\"box\" style={{background: isNo === true ? 'grey' : null}} onClick={onNo}>No</div>\n    </div>\n  },\n  Bop: (props) => {\n    const options = props.options.options;\n    const [currentSelection, setSelection] = useState(props.value);\n    const select = (o) => {\n      setSelection(o);\n      props.onValueChange(o);\n    };\n    return <div className=\"ele col\">\n      {options.map((o, i) => {\n        return <div key={i}\n                    className=\"box\"\n                    style={{background: currentSelection === o ? 'grey' : null}}\n                    onClick={() => {\n                      select(o);\n                    }}>\n          {o}\n        </div>\n      })}\n    </div>\n  },\n  GoogleAssist: (props) => {\n    const inputEl = useRef(null);\n    const {exportNames} = props.options;\n\n    useEffect(() => {\n      const autocomplete = new window.google.maps.places.Autocomplete(inputEl.current, {\n        types: ['establishment'],\n        componentRestrictions: {'country': ['us']},\n\n      });\n      autocomplete.setFields(['address_components', 'name', 'rating', 'place_id', 'photos', 'formatted_address', 'adr_address']);\n      const autocompleteLsr = autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        place.photosUrl = (place.photos || []).map(p => {\n          return p.getUrl({maxHeight: 100})\n        });\n\n        const globalValues = {};\n        for (let k in exportNames) {\n          globalValues[exportNames[k]] = _.get(place, k, null);\n        }\n        props.onGlobalValueChange(globalValues);\n      });\n\n      return () => {\n        window.google.maps.event.removeListener(autocompleteLsr);\n        window.google.maps.event.clearInstanceListeners(autocomplete);\n      }\n    });\n\n    const searchAgain = () => {\n      inputEl.current.value = '';\n      for (let k in exportNames) {\n        props.onGlobalValueChange(exportNames[k], null);\n      }\n      inputEl.current.focus();\n    };\n\n    return <div className=\"formElement\">\n      <input ref={inputEl} type=\"text\"/>\n      <button className=\"smallMarginLeft\" onClick={searchAgain}>Search</button>\n    </div>\n  },\n  GoogleImages: (props) => {\n    return <div>{props.value === null\n      ? null\n      : props.value.slice(0, 3).map((imgUrl, i) => {\n        return <img key={i} src={imgUrl} alt=\"\"/>\n      })}\n    </div>;\n  },\n  Journey: (props) => {\n    const [currentPage, setCurrentPage] = useState(props.value === null ? 0 : props.value.currentPage);\n    const [errors, setErrors] = useState(null);\n\n    const validatePage = () => {\n      const p = props.options.pages[currentPage];\n\n      return p.validate.reduce((m, v) => {\n        if (_.get(props.value[p.name], v.name, null) === null) {\n          m.push(v.errorMessage);\n        }\n        return m;\n      }, []);\n    };\n\n    const onNext = () => {\n      const errors = validatePage();\n      if (errors.length) {\n        setErrors(errors);\n      } else {\n        setErrors(null);\n        if (currentPage < props.options.pages.length - 1) {\n          const c = currentPage + 1;\n          setCurrentPage(c);\n          props.onValueChange({...props.value, ...{currentPage: c}});\n        }\n      }\n    };\n\n    const onBack = () => {\n      const errors = validatePage();\n      if (errors.length) {\n        setErrors(errors);\n      } else {\n        setErrors(null);\n        if (currentPage > 0) {\n          const c = currentPage - 1;\n          setCurrentPage(c);\n          props.onValueChange({...props.value, ...{currentPage: c}});\n        }\n      }\n    };\n\n    const onPageChange = (d, name) => {\n      const value = props.value === null ? {} : {...props.value};\n      value[name] = d;\n      props.onValueChange(value);\n    };\n\n    return <div>\n      <Breadcrumbs separator=\">\">\n        {props.options.pages.map((p, i) => {\n          return <Typography key={i} color={currentPage === i ? 'textPrimary' : 'textSecondary'}>{p.title}</Typography>\n        })}\n      </Breadcrumbs>\n\n      {errors === null\n        ? null\n        : errors.map((e, i) => <h5 key={i}>{e}</h5>)\n      }\n      {props.options.pages.map((p, i) => {\n        return <div key={i} className={i !== currentPage ? 'hide' : null}>\n          <Form init={props.value === null ? null : props.value[p.name]}\n                content={p.content}\n                onChange={(d) => {\n                  onPageChange(d, p.name)\n                }}/>\n        </div>\n      })}\n\n      <button onClick={onBack}>Back</button>\n      &nbsp;&nbsp;\n      <button onClick={onNext}>Next</button>\n\n    </div>\n  },\n  Summary: (props) => {\n    const [content, setContent] = useState(props.value === null ? null : props.value.content);\n    const [collapsed, setCollapsed] = useState(props.value === null ? false : props.value.collapsed);\n\n    props.onContentValueUpdate((d) => {\n      setContent(d);\n    });\n\n    const toggle = () => {\n      const c = !collapsed;\n      setCollapsed(c);\n      props.onValueChange({content: content, collapsed: c});\n    };\n\n    const handleOnSave = () => {\n      toggle();\n    };\n\n    const handleOnEdit = () => {\n      toggle();\n    };\n\n    return <div>\n      <div>\n        {collapsed\n          ? content !== null\n            ? <div>\n              <div>\n                {props.options.summary.map((s, i) => {\n                  return <div key={i}>{s.name}&nbsp;:&nbsp;{content[s.name]}</div>\n                })}\n              </div>\n              <div>\n                <button onClick={handleOnEdit}>Edit</button>\n              </div>\n            </div>\n            : null\n          : props.content\n        }\n      </div>\n      <button onClick={handleOnSave}>Save</button>\n    </div>\n  },\n};\n","// const FormulaParser = import ('hot-formula-parser').Parser;\nimport {Parser} from \"hot-formula-parser\";\n\nexport const evalShowOn = (showOn) => {\n  if (typeof showOn === 'function') {\n    return showOn;\n  }\n  if (typeof showOn === 'string') {\n    return (args) => {\n      const parser = new Parser();\n      parser.setFunction('LENGTH', (params) => {\n        return params[0].length;\n      });\n      for (let key in args) {\n        parser.setVariable(key, args[key]);\n      }\n      const res = parser.parse(showOn);\n      if (res.error !== null) {\n        console.error('Something went wrong while parsing formula', parser);\n      }\n      return res.result;\n    }\n  }\n  return () => true;\n};\n","import React, {useContext, useEffect, useState} from 'react';\nimport {FormContext} from \"../Form/FormContext\";\nimport _ from 'lodash';\nimport {customWidgets} from './../../services/settings/tenants/tenant6';\nimport Form from \"../Form\";\nimport {widgets} from \"./defaultWidgets\";\nimport {evalShowOn} from \"../../util/common\";\n\n/**\n * @return {null}\n */\nfunction WidgetWrapper({item, Widget}) {\n  //TODO:WidgetWrapper should not mount on every change\n  const key = item.name;\n  const showOn = evalShowOn(item.showOn);\n  const context = useContext(FormContext);\n  const keys = context.getKeys();\n  const [value, setValue] = useState(keys[key]);\n  const [globalValue, setGlobalValue] = useState(keys);\n  const [isVisible, setVisibility] = useState(showOn(keys));\n\n  let onContentValueChangeCallback = null;\n\n  useEffect(() => {\n    const callbackIndex = context.onChange(keys => {\n      setValue(keys[key]);\n      setGlobalValue({...keys});\n      setVisibility(showOn(keys));\n    });\n    return () => {\n      context.deregister(callbackIndex);\n    };\n  });\n\n  const onValueChange = (val) => {\n    context.setKey(key, val);\n  };\n  const onGlobalValueChange = (keys) => {\n    context.setKeys(keys);\n  };\n\n  const onContentValueUpdate = (c) => {\n    onContentValueChangeCallback = c;\n  };\n\n  const handleOnFormChange = (d) => {\n    onContentValueChangeCallback(d)\n  };\n\n  return isVisible\n    ? <Widget value={value}\n              globalValue={globalValue}\n              onValueChange={onValueChange}\n              onGlobalValueChange={onGlobalValueChange}\n              onContentValueUpdate={onContentValueUpdate}\n              content={item.hasOwnProperty('content')\n                ? <Form content={item.content} init={value === null ? null : value.content}\n                        onChange={handleOnFormChange}/>\n                : null}\n              options={item.options}>\n    </Widget>\n    : null;\n}\n\n/**\n * @return {null}\n */\nfunction RepeatableWidgetWrapper({item, Widget, index}) {\n  const context = useContext(FormContext);\n  const [value, setValue] = useState(context.getList()[index]);\n\n  useEffect(() => {\n    const callbackIndex = context.onChange((list) => {\n      setValue(list[index]);\n    });\n\n    return () => {\n      context.deregister(callbackIndex);\n    };\n  });\n\n  const onValueChange = (val) => {\n    context.setEle(val, index);\n  };\n\n  return <Widget value={value}\n                 onValueChange={onValueChange}\n                 options={item.options}/>\n}\n\nconst wrapWidgets = (widgets) => {\n  const wrappedWidgets = {};\n  for (const key in widgets) {\n    const Widget = widgets[key];\n    wrappedWidgets[key] = (item) => {\n      return item.isRepeatable === true\n        ? <RepeatableWidgetWrapper item={item} Widget={Widget}/>\n        : <WidgetWrapper item={item} Widget={Widget}/>\n    }\n  }\n  return wrappedWidgets;\n};\n\nconst wrapCustomWidgets = (customWidgets) => {\n  const wrappedCustomWidgets = {};\n  for (const key in customWidgets) {\n    const content = customWidgets[key];\n    wrappedCustomWidgets[key] = (props) => {\n      return <Form content={content} init={props.value} onChange={props.onValueChange}/>\n    }\n  }\n  return wrapWidgets(wrappedCustomWidgets);\n};\n\nconst allWidgets = _.extend(wrapCustomWidgets(customWidgets), wrapWidgets(widgets));\nexport default allWidgets;\n","export const customWidgets = {\n  GooglePlaces: {\n    items: [\n      {\n        widget: 'GoogleAssist', name: 'googleAssist', options: {\n          exportNames: {\n            place_id: 'googlePlaceId',\n            name: 'name',\n            formatted_address: 'address',\n            photosUrl: 'googleImages',\n            rating: 'googleRating'\n          }\n        }\n      },\n      {\n        widget: 'Text', name: 'googleRating', options: {text: 'User rating : {{googleRating}} of 5'},\n        showOn: \"IF(address=NULL, FALSE, TRUE)\"\n      },\n      {widget: 'GoogleImages', name: 'googleImages', showOn: \"IF(address=NULL, FALSE, TRUE)\"},\n      {widget: 'InputBox', name: 'name', options: {label: 'Building name'}, showOn: \"IF(address=NULL, FALSE, TRUE)\"},\n      {widget: 'InputBox', name: 'address', options: {label: 'Address'}, showOn: \"IF(address=NULL, FALSE, TRUE)\"}\n    ]\n  },\n  BuildingList: {\n    container: 'demark',\n    items: [{\n      widget: 'GooglePlaces', name: 'building'\n    }]\n  },\n  BuildingWidget: {\n    items: [{\n      content: {\n        items: [\n          {\n            name: 'address',\n            widget: 'Summary',\n            content: {\n              items: [\n                {\n                  content: {\n                    container: 'col',\n                    items: [\n                      {name: 'streetAddress', widget: 'InputBox', options: {label: 'Street Address'}},\n                      {name: 'suite', widget: 'InputBox', options: {label: 'Suite'}},\n                      {name: 'city', widget: 'InputBox', options: {label: 'City'}}\n                    ]\n                  }\n                },\n                {\n                  content: {\n                    container: 'col',\n                    items: [\n                      {name: 'state', widget: 'InputBox', options: {label: 'State'}},\n                      {name: 'zipCode', widget: 'InputBox', options: {label: 'Zip Code'}}\n                    ]\n                  }\n                }\n              ]\n            },\n            options: {\n              summary: [\n                {name: 'streetAddress', label: 'Street Address'},\n                {name: 'suite', label: 'Suite'},\n                {name: 'city', label: 'City'},\n                {name: 'zipCode', label: 'Zipcode'}\n              ],\n              validate: {}\n            }\n          },\n        ]\n      }\n    }]\n  },\n  LocationWidget: {\n    items: [\n      {name: 'Location', widget: 'InputBox', options: {label: 'Location'}},\n      {name: 'Building', widget: 'BuildingWidget', options: {}, isRepeatable: true},\n    ]\n  },\n  LOBSelection: {\n    items: [\n      {widget: 'Text', options: {text: 'Do you own this building?'}, name: 'ownBuilding'},\n      {widget: 'YesNo', name: 'doesOwnBuilding'},\n      {widget: 'Text', options: {text: 'What policy do you want to buy?'}, name: 'policySelectionQuestion'},\n      {\n        widget: 'Bop', name: 'policyName', options: {\n          options: ['Business Owner Policy', 'Worker Compensation', 'Building Policy']\n        }\n      },\n      {\n        widget: 'Text', options: {text: 'Is your building close to police station?'},\n        showOn: \"IF(policyName='Business Owner Policy', TRUE, FALSE)\",\n      },\n      {widget: 'YesNoText', name: 'CloseToPoliceStation', showOn: \"IF(policyName='Business Owner Policy', TRUE, FALSE)\"}\n    ]\n  }\n};\n\nexport const content = {\n  items: [{\n    widget: 'Journey', name: 'journey',\n    options: {\n      pages: [\n        {\n          title:'Business Details',\n          name: 'Page1',\n          content: {\n            container: 'demark',\n            items: [{widget: 'GooglePlaces', name: 'googlePlaces'}]\n          },\n          validate: [\n            {name: 'googlePlaces.name', errorMessage: 'Business name cannot be empty'},\n          ]\n        },\n        {\n          title:'Select LOB',\n          name: 'Page2',\n          content: {\n            container: 'demark',\n            items: [{name: 'lobSelection', widget: 'LOBSelection'}]\n          },\n          validate: []\n        },\n        {\n          title:'Buildings',\n          name: 'Page3',\n          content: {\n            container: 'demark',\n            items: [{name: 'buildingList', widget: 'BuildingList', isRepeatable: true}]\n          },\n          validate: []\n        },\n        {\n          title:'Locations',\n          name: 'Page4',\n          content: {\n            container: 'demark',\n            items: [{name: 'locationWithBuildings', widget: 'LocationWidget', isRepeatable: true}]\n          },\n          validate: []\n        }\n      ]\n    }\n  }]\n};\n","import React, {useContext, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport widgets from '../widgets';\nimport {FormContext} from \"../Form/FormContext\";\n\nfunction ToList(props) {\n  const context = useContext(FormContext);\n  const name = props.item.name;\n  const [list, setList] = useState(context.getKeys()[name]);\n\n  const handleOnAdd = () => {\n    setList([...list, null]);\n  };\n  let callbacks = [];\n  const onChange = (l => {\n    context.setKey(name, l);\n  });\n\n  const listContextValue = {\n    getList: () => {\n      return list;\n    },\n    setEle: (ele, i) => {\n      list[i] = ele;\n      callbacks.forEach(c => c(list));\n      onChange(list);\n    },\n    onChange: (callback) => {\n      callbacks = [...callbacks, callback];\n      return callbacks.length - 1;\n    },\n    deregister: (index) => {\n      //TODO:use map instead\n      callbacks[index] = () => {\n      };\n    }\n  };\n  //TODO: dont use context - replace with object\n  return <>\n    {list.map((c, i) => {\n      return <FormContext.Provider key={i} value={listContextValue}>\n        {React.cloneElement(props.Widget, {index: i})}\n      </FormContext.Provider>\n    })}\n    <div className=\"col spread\">\n      <button onClick={handleOnAdd}>Add</button>\n    </div>\n  </>\n}\n\n\nFormGen.propTypes = {\n  content: PropTypes.any\n};\n\nfunction withContentRenderer(content) {\n  return <FormGen content={content}/>;\n}\n\nfunction withWidgetRenderer(item) {\n  const Widget = widgets[item.widget](item);\n  if (item.isRepeatable) {\n    return <ToList Widget={Widget} item={item}/>\n  }\n  return Widget;\n}\n\n// {\n//   return <div key={j}>{\n//     item.hasOwnProperty('content')\n//       ? item.hasOwnProperty('widget') ? withWidgetRenderer(item) : withContentRenderer(item.content)\n//       : withWidgetRenderer(item)}\n//   </div>\n// }\n\nfunction FormGen(props) {\n  return (\n    <div className={props.content.hasOwnProperty('container') ? props.content.container : null}>\n      {props.content.items.map((item, j) => {\n        return <div key={j}>\n          {\n            item.hasOwnProperty('widget')\n              ? withWidgetRenderer(item)\n              : withContentRenderer(item.content)\n          }\n        </div>\n      })}\n    </div>);\n}\n\nexport default FormGen;\n","export const defaultData = (content) => {\n  let data = {};\n  const initContent = (content) => {\n    content.items.forEach((item) => {\n      if (item.widget && item.name) {\n        data[item.name] = item.isRepeatable ? [null] : item.hasOwnProperty('defaultValue') ? item.defaultValue : null;\n      }\n      if (item.content && !item.widget) {\n        initContent(item.content)\n      }\n    });\n  };\n  initContent(content);\n  return data;\n};\n","import React from 'react';\nimport FormGen from \"../FormGen\";\nimport PropTypes from 'prop-types';\nimport {FormContext} from \"./FormContext\";\nimport {defaultData} from \"../../services/settings/util\";\nimport _ from 'lodash';\n\nForm.propTypes = {\n  content: PropTypes.any,\n  init: PropTypes.any,\n  onChange: PropTypes.func\n};\n\nfunction Form(props) {\n\n  let keys = _.extend(defaultData(props.content), props.init);\n  let callbacks = [];\n\n  return (\n    <FormContext.Provider value={{\n      getKeys: function () {\n        return keys;\n      },\n      setKeys: function (newKeys) {\n        keys = {...keys, ...newKeys};\n        callbacks.forEach(c => c(keys));\n        props.onChange(keys);\n      },\n      setKey: function (key, val) {\n        keys[key] = val;\n        callbacks.forEach(c => c(keys, key));\n        props.onChange(keys);\n      },\n      onChange: (callback) => {\n        callbacks = [...callbacks, callback];\n        return callbacks.length - 1;\n      },\n      deregister: (index) => {\n        //TODO:use map instead\n        callbacks[index] = () => {\n        };\n      }\n    }}>\n      <FormGen content={props.content}/>\n    </FormContext.Provider>\n  );\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport Form from './components/Form';\nimport {content as content1} from './services/settings/tenants/tenant1';\nimport {content as content2} from './services/settings/tenants/tenant2';\n// import {content as content3} from './services/settings/tenants/tenant3';\nimport {content as content4} from './services/settings/tenants/tenant4';\nimport {content as content5} from './services/settings/tenants/tenant5';\nimport {content as content6} from './services/settings/tenants/tenant6';\nimport './App.scss';\nconst tenants = [content1, content2, content4, content5, content6];\nconst data = window.sessionStorage.getItem('data');\n// const data = null;\n// const dataFromDB = data === null ? {} : JSON.parse(data);\n\nfunction App() {\n\n  let data = null;\n\n  const onChange = (t) => {\n    data = t;\n  };\n  const [currTenant, setCurrTenant] = useState(tenants[0]);\n  const handleOnSave = () => {\n    alert(JSON.stringify(data, null, 2));\n    if (data === null) return;\n    const s = JSON.stringify(data);\n    window.sessionStorage.setItem('data', s);\n  };\n\n  const handleOnClear = () => {\n    window.sessionStorage.clear();\n  };\n\n  const handleTenantChange = (e) => {\n    setCurrTenant(tenants[parseInt(e.target.value)])\n  }\n\n  const handleShowConfig = () => {\n      alert(JSON.stringify(currTenant, null, 2))\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"appContainer\">\n        <h1 className=\"center\">JSON Form builder</h1>\n        <h4>\n            The forms below are auto-generated using a json configuration file. Select a sample config file\n            &nbsp;<select onChange={handleTenantChange}>\n                {tenants.map((t,i)=>{\n                    return <option key={i} value={i}>Sample form {i+1}</option>\n                })}\n            </select>&nbsp;\n            <a href=\"javascript:void(0)\" onClick={handleShowConfig}>Show config</a>\n        </h4>\n        <div className=\"mediumMarginBottom\">Enter some data in the form below and click <b>Test Exported From Form</b> to see the JSON data</div>\n        <Form content={currTenant}\n              init={{}}\n              onChange={onChange}/>\n\n        {/*<button onClick={handleOnClear}>Clear</button>*/}\n        <button onClick={handleOnSave}>Test Exported From Form</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const customWidgets = {\n  BuildingWidget: {\n    container: 'row',\n    items: [\n      {\n        content: {\n          container: 'row',\n          items: [\n            {name: 'BuildingDescription', widget: 'InputBox', options: {label: 'Building description'}},\n            {\n              content: {\n                container: 'col',\n                items: [\n                  {name: 'StreetAddress', widget: 'InputBox', options: {label: 'Street Address'}},\n                  {name: 'Suite', widget: 'InputBox', options: {label: 'Suite'}},\n                  {name: 'City', widget: 'InputBox', options: {label: 'City'}},\n                ]\n              }\n            },\n            {\n              content: {\n                container: 'col',\n                items: [\n                  {name: 'State', widget: 'InputBox', options: {label: 'State'}},\n                  {name: 'ZipCode', widget: 'InputBox', options: {label: 'Zip Code'}}\n                ]\n              }\n            },\n            {\n              content: {\n                container: 'row',\n                items: [\n                  {\n                    name: 'Q1Text',\n                    widget: 'Question',\n                    options: {text: 'Q1. Is your building close to hospital?'},\n                    showOn: (data) => {\n                      return data.BuildingDescription !== null;\n                    }\n                  },\n                  {\n                    name: 'Q1', widget: 'YesNo', showOn: (data) => {\n                      return data.BuildingDescription !== null;\n                    }\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ]\n  },\n  LocationWidget: {\n    container: 'row',\n    items: [\n      {name: 'Location', widget: 'InputBox', options: {label: 'Location'}},\n      {name: 'Building', widget: 'BuildingWidget', options: {}, isRepeatable: true},\n    ]\n  },\n};\n\nexport const content = {\n  container: 'row demark',\n  items: [{name: 'LocationWithBuildings', widget: 'LocationWidget', isRepeatable: true}]\n};\n","export const customWidgets = {};\n\nexport const content = {\n  container: 'row demark',\n  items: [\n    {widget: 'Text', options: {text: 'Welcome to this JSON Form builder'}, name: 'intro'},\n    {widget: 'Text', options: {text: 'Where is your house located?'}},\n    {widget: 'InputBox', name: 'Location', isRepeatable: true},\n    {widget: 'InputBox', name: 'Default', defaultValue: '10'},\n    {widget: 'Text', options: {text: 'Do you own this house?'}, name: 'ownBuilding'},\n    {widget: 'YesNo', name: 'DoesOwnBuilding'},\n    {widget: 'Text', options: {text: 'What option do you want to choose'}, name: 'policySelectionQuestion'},\n    {\n      widget: 'Bop',\n      name: 'policyName',\n      options: {options: ['Option A', 'Option B', 'Option C']}\n    },\n    {\n      widget: 'Text',\n      options: {text: 'Is your building close to police station?'},\n      showOn: \"IF(policyName='Option A', TRUE, FALSE)\",\n    },\n    {widget: 'YesNoText', name: 'CloseToPoliceStation', showOn: \"IF(policyName='Option A', TRUE, FALSE)\"}\n  ]\n};\n","export const customWidgets = {\n  LocationWidget: {\n    container: 'row',\n    items: [\n      {name: 'Location', widget: 'InputBox', options: {label: 'Location'}},\n    ]\n  },\n};\n\nexport const content = {\n  container: 'row',\n  items: [{\n    name: 'Journey1', widget: 'Journey',\n    options: {\n      pages: [\n        {\n          name: 'Page1',\n          content: {\n            container: 'row', items:\n              [\n                {widget: 'InputBox', name: 'a'},\n                {widget: 'InputBox', name: 'b'}\n              ]\n          },\n          validate: [\n            {name: 'a', errorMessage: 'a Cannot be empty'},\n            {name: 'b', errorMessage: 'b Cannot be empty'}\n          ]\n        },\n        {\n          name: 'Page2',\n          content: {\n            container: 'row', items:\n              [\n                {widget: 'InputBox', name: 'c'},\n                {widget: 'InputBox', name: 'd'}\n              ]\n          },\n          validate: [\n            {name: 'c', errorMessage: 'Cannot be empty'},\n            {name: 'd', errorMessage: 'Cannot be empty'}\n          ]\n        }\n      ]\n    }\n  }]\n};\n","export const customWidgets = {\n  BuildingWidget: {\n    container: 'row',\n    items: [{\n      content: {\n        container: 'row',\n        items: [\n          {name: 'BuildingDescription', widget: 'InputBox', options: {label: 'Building description'}},\n          {\n            name: 'Address',\n            widget: 'AddressSummary',\n            content: {\n              container: 'row',\n              items: [\n                {\n                  content: {\n                    container: 'col',\n                    items: [\n                      {name: 'streetAddress', widget: 'InputBox', options: {label: 'Street Address'}},\n                      {name: 'suite', widget: 'InputBox', options: {label: 'Suite'}},\n                      {name: 'city', widget: 'InputBox', options: {label: 'City'}},\n                    ]\n                  }\n                },\n                {\n                  content: {\n                    container: 'col',\n                    items: [\n                      {name: 'state', widget: 'InputBox', options: {label: 'State'}},\n                      {name: 'zipCode', widget: 'InputBox', options: {label: 'Zip Code'}}\n                    ]\n                  }\n                }\n              ]\n            },\n            options: {\n              summary: [\n                {name: 'streetAddress', label: 'Street Address'},\n                {name: 'suite', label: 'Suite'},\n                {name: 'city', label: 'City'},\n                {name: 'zipCode', label: 'Zipcode'}\n              ],\n              validate: {}\n            }\n          },\n        ]\n      }\n    }]\n  },\n  LocationWidget: {\n    container: 'row',\n    items: [\n      {name: 'Location', widget: 'InputBox', options: {label: 'Location'}},\n      {name: 'Building', widget: 'BuildingWidget', options: {}, isRepeatable: true},\n    ]\n  },\n};\n\nexport const content = {\n  container: 'row demark',\n  items: [{name: 'LocationWithBuildings', widget: 'LocationWidget', isRepeatable: true}]\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}